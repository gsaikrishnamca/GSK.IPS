version: '3.4'

# Services - Creating services using Docker compose
services:
  # Identity API Service
  identity.api:
    # Container name displayed in Docker
    container_name: cnidentityapi
    # Image name displayed in Docker
    image: ${DOCKER_REGISTRY-}img-identityapi
    # Run Docker build command with parameters
    build:
      context: .
      dockerfile: Identity.API/Dockerfile
    # Making sure that all the microservices are on same network
    networks:
      - adminer-network
    # Identity service will run once db service is up and running
    depends_on:
      db:
        condition: service_healthy

  webhookclient:
    container_name: cnwebhookclient
    image: ${DOCKER_REGISTRY-}img-webhookclient
    build:
      context: .
      dockerfile: WebhookClient/Dockerfile
    networks:
      - adminer-network
    depends_on:
      db:
        condition: service_healthy

  webhooks.api:
    container_name: cnwebhooksapi
    image: ${DOCKER_REGISTRY-}img-webhooksapi
    build:
      context: .
      dockerfile: Webhooks.API/Dockerfile
    networks:
      - adminer-network
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres
    restart: always
    container_name: db
    environment:
      POSTGRES_DB: IdentityDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
    ports:
      - 8090:8090
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - adminer-network
    healthcheck:
      test: ["CMD-SHELL","psql -U postgres"]
      interval: 1s
      timeout: 5s
      retries: 10

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    environment:
      ADMINER_DEFAULT_SERVER: db
    depends_on:
      - db
    networks:
      - adminer-network
  
  rabbitmq:
    image: rabbitmq:3-management
    container_name: "rabbitmq"
    environment:
            - "RABBITMQ_DEFAULT_PASS=guest"
            - "RABBITMQ_DEFAULT_USER=guest"
    read_only: false
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - adminer-network

volumes:
 postgres-data:

networks:
  adminer-network: